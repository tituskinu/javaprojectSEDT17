PolyMorphism:
    its the ability ofv an object to behave differently. we
    can achieve polymorphism in two ways one is methode overloading and other is
    methodOverriding(very Common)

Why should we learn about PolyMorphism?
    1) it allow us to write a dynamic programs. Which can save us a lot of
    code reputation.

Example
    Webdriver webdriver=new ChromeDriver();
    ChromeDriver chromeDriver=new ChromeDriver();
Interview Question:
    Do we need MethodeOverriding for polymorphism?
    Yes but we can also do this using methodeOverloading.
Abstraction:
    Abstraction is the process of hiding implementation details and showing only functionality.we can
    achieve abstraction using abstract classes and interfaces.
Why:
    When we use abstraction it simplifies our code. Those classes which don't need to provide the
    implementation to the methode can leave it.
Keywords.
    abstract.
  1) can we have private methods as abstract methods?
    private means no participating in inheritance which means no overriding which make abstract methode useless.
  2) Can we have methode as final and abstract at the same time?
    Final means something is incomplete and requires modification.
    these are opposite to each other and not allowed.
Interfaces:
    Interface are collection of public static final variable and methode which are by default public abstract. After
    java 8 we can default, static and private methode as well.but constructor are not allowed in interface
Why use interfaces?
    1) There is no diamond problem in interface which allow as to have multiple inheritance.
    2) They are light weight simple contracts and can be use even when class are not related to each other.
Interview questions:
    Can we have private variable in interface?
    1) can we have private methods as abstract methods?
        private means no participating in inheritance which means no overriding which make abstract methode useless.
      2) Can we have methode as final and abstract at the same time?
        Final means something is incomplete and requires modification.
        these are opposite to each other and not allowed.

